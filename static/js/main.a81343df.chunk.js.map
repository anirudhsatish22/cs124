{"version":3,"sources":["logo.svg","Task.js","To-DoList.js","App.js","reportWebVitals.js","index.js"],"names":["Task","props","useState","completed","setCompleted","editContent","setEditContent","task","taskValue","setTaskValue","type","onChange","onTaskCompleted","id","displayButtons","checked","class","suppressContentEditableWarning","contentEditable","onKeyDown","k","code","setTimeout","onInput","e","currentTarget","textContent","key","myLength","ToDoList","value","setValue","showCompleted","setShowCompleted","numCompleted","setNumCompleted","enterB","newItem","toString","onNewItemAdded","updatedList","unSortedList","checkedArray","filter","x","uncheckedArray","renderList","list","target","placeholder","onClick","map","a","selectedId","field","onContentChange","whetherCompleted","swal","title","text","icon","buttons","dangerMode","then","okToDelete","remainingList","onDeleteItem","App","data","setData","newData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a81343df.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState} from 'react';\nfunction Task(props) {\n    const [completed, setCompleted] = useState(props.completed);\n    const [editContent, setEditContent] = useState(true);\n    const [taskValue, setTaskValue] = useState(props.task)\n\n    function editTimeout() {\n        setEditContent(false);\n        props.onTaskCompleted(props.id, 'task', taskValue);\n        setTimeout(() => {setEditContent(true)},50)\n    }\n\n    return (<li key ={props.key}>\n        <label>\n            <input type=\"checkbox\" onChange={() => {setCompleted(!completed); props.onTaskCompleted(props.id, 'completed', !completed); props.displayButtons(!completed)}} checked = {false} class={completed ? \"checked\" : \"unchecked\"}/>\n                <span suppressContentEditableWarning={true} contentEditable={editContent} onKeyDown={(k)=> k.code === 'Enter' ? editTimeout() : null} class={completed ? \"checked-text\" : \"unchecked-text\"} onInput={(e) => setTaskValue(e.currentTarget.textContent)}>{props.task}</span>\n        </label>\n    </li>);\n\n}\n\n// {\nexport default Task;","import Task from './Task';\nimport swal from 'sweetalert';\n\nimport React, {useEffect, useState} from 'react';\nlet myLength = 4;\nfunction ToDoList(props) {\n    const [value, setValue] = useState(null);\n    const [showCompleted, setShowCompleted] = useState(true);\n    const [numCompleted, setNumCompleted] = useState(1);\n\n    function enterB() {\n        if (value !== null && value !== \"\") {\n            let newItem = {\n                id: (++myLength).toString(),\n                task: value,\n                completed: false\n            };\n            props.onNewItemAdded(newItem);\n            setValue(\"\")\n        }\n    }\n    function renderList(unSortedList) {\n        let checkedArray = unSortedList.filter(x => x.completed)\n        let uncheckedArray = unSortedList.filter(x => !x.completed)\n        return [...uncheckedArray, ...checkedArray]\n    }\n\n    function onDelete(){\n        swal({\n            title: \"Are you sure?\",\n            text: \"Once deleted, you will not be able to recover completed tasks!\",\n            icon: \"warning\",\n            buttons: [\"No\", \"Yes\"],\n            dangerMode: true,\n        })\n            .then((okToDelete) => {\n                if (okToDelete) {\n                    let remainingList = updatedList.filter(a => a.completed === false);\n                    props.onDeleteItem(remainingList);\n                    setNumCompleted(0)\n\n                } else {\n                    return;\n                }\n            });\n    }\n\n\n\n    let updatedList = renderList(props.list)\n\n    return (\n        <>\n            <h1 id=\"top-title\">To-Do List</h1>\n            <div id=\"container\">\n\n                <div id=\"enter-item\">\n                    <input type=\"text\" value={value} id=\"input-text\" onKeyDown={(e) => e.code === \"Enter\" ? enterB() : null} onChange={ (e) => setValue(e.target.value)} placeholder=\"Add a task...\"/>\n                    <span id=\"enter-span\">\n                    <button class={ value !== \"\" && value !== null ? \"show-buttons\" : \"grey-buttons\"}onClick={enterB} id=\"enter-button\">+</button>\n                    </span>\n                </div>\n\n                <div class=\"ListItems\">\n                    <ul id=\"list\">\n                        {showCompleted ? updatedList.map(a => <Task\n                            onTaskCompleted={ (selectedId, field, value) =>\n                                props.onContentChange(selectedId, field, value)\n                            }\n                            key = {a.id}\n                            displayButtons ={(whetherCompleted)=> whetherCompleted ? setNumCompleted(numCompleted + 1) : setNumCompleted(numCompleted-1)}\n                            {...a}\n                        />) : updatedList.filter(a => a.completed === false).map(a => <Task\n                            onTaskCompleted={ (selectedId, field, value) =>\n                                props.onContentChange(selectedId, field, value)\n                            }\n                            key = {a.id}\n                            displayButtons ={(whetherCompleted)=> whetherCompleted ? setNumCompleted(numCompleted + 1) : setNumCompleted(numCompleted-1)}\n                            {...a}\n                        />)}\n\n                    </ul>\n                </div>\n                <button class={numCompleted > 0 ? \"show-buttons\" : \"grey-buttons\"} id=\"hide-completed-button\" onClick={() => setShowCompleted(!showCompleted)}>{showCompleted ? \"Hide Completed\" : \"Show Completed\"}</button>\n                <button class={numCompleted > 0 && showCompleted ? \"show-buttons\" : \"grey-buttons\"} id=\"delete-button\" onClick={onDelete}>Delete Completed</button>\n            </div>\n        </>\n);\n}\n\n\nexport default ToDoList;\n\n","import logo from './logo.svg';\nimport './App.css';\nimport ToDoList from \"./To-DoList\";\nimport React, {useState} from 'react';\n\n\n\nfunction App(props) {\n    const [data, setData] = useState(props.data)\n    function setField(id, field, value) {\n        if (field === 'task' && (value == \"\" || value != null)) {\n            const newData = data.filter(e => e.id != id)\n            setData(newData)\n            return\n        }\n        const newData = data.map(e => e.id === id? {...e, [field]: value} : e)\n        setData(newData)\n    }\n    function addItem(newItem) {\n        setData([...data, newItem]);\n    }\n    function onDelete(remainingList) {\n        setData(remainingList);\n    }\n  return (\n      <ToDoList list={data} onContentChange={setField} onNewItemAdded={addItem} onDeleteItem={onDelete}></ToDoList>\n  );\n}\n\nexport default App;\n\n\n// focus in list when adding item\n// slowly move down when checked\n\n// for design.md\n// talk about new design changes (label not clickable)\n// scrolling vertically and horizontally,  (wrapping)\n// when buttons are usable (grey out when not) (all 3 buttons)\n// added an alert when deleting (talk about the package )\n// cannot enter a null item\n// enter / return in keyboard works\n// delete html files\n\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nconst initialData = [\n    {\n        id: \"1\",\n        task: \"Sleep\",\n        completed: false\n    },\n    {\n        id: \"2\",\n        task: \"Start CS124 Lab3\",\n        completed: false\n    },\n    {\n        id: \"3\",\n        task: \"Submit CS124 Lab2\",\n        completed: true,\n    },\n    {\n        id: \"4\",\n        task: \"Enjoy Fall Break!\",\n        completed: false\n    }\n];\n\nReactDOM.render(\n  <React.StrictMode>\n       <App data={initialData}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}