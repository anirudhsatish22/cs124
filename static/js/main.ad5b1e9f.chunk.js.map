{"version":3,"sources":["logo.svg","Task.js","To-DoList.js","App.js","reportWebVitals.js","index.js"],"names":["Task","props","completed","useState","editContent","setEditContent","task","taskValue","setTaskValue","className","type","onChange","onTaskCompleted","id","displayButtons","checked","class","suppressContentEditableWarning","contentEditable","onKeyDown","k","code","setTimeout","onInput","e","currentTarget","textContent","parseInt","target","value","priority","key","ToDoList","setValue","setPriority","showCompleted","setShowCompleted","enterB","newItem","generateUniqueID","created","firebase","database","ServerValue","TIMESTAMP","onNewItemAdded","numCompleted","console","log","list","updatedList","unSortedList","checkedArray","filter","x","length","uncheckedArray","renderList","defaultValue","filterValue","filterBy","toLowerCase","selected","disabled","placeholder","onClick","map","a","selectedId","field","onContentChange","whetherCompleted","swal","title","text","icon","buttons","dangerMode","then","okToDelete","listOfIds","onDeleteItem","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","ourCollection","App","setFilter","query","collection","orderBy","useCollection","loading","taskList","docs","doc","data","onDelete","delete","update","set","currentFilter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad5b1e9f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState} from 'react';\nfunction Task(props) {\n    const completed=props.completed;\n    const [editContent, setEditContent] = useState(true);\n    const [taskValue, setTaskValue] = useState(props.task)\n\n    function editTimeout() {\n        setEditContent(false);\n        props.onTaskCompleted(props.id, 'task', taskValue);\n        setTimeout(() => {setEditContent(true)},50)\n    }\n    return (\n    <li key ={props.key}>\n        <span className=\"taskItem\">\n        <label>\n            <input type=\"checkbox\" onChange={() => {props.onTaskCompleted(props.id, 'completed', !completed); props.displayButtons(!completed)}} checked = {false} class={completed ? \"checked\" : \"unchecked\"}/>\n                    <span suppressContentEditableWarning={true} contentEditable={editContent} onKeyDown={(k)=> k.code === 'Enter' ? editTimeout() : null} class={completed ? \"checked-text\" : \"unchecked-text\"} onInput={(e) => setTaskValue(e.currentTarget.textContent)}>{props.task}</span>\n                             {/*onChange={(e) => setPriority(e.target.value)} defaultValue={priority}*/}\n        </label>\n        </span>\n        <span className=\"taskPriorityContainer\">\n        <select className=\"taskPriority\" onChange={(e) => props.onTaskCompleted(props.id, 'priority', parseInt(e.target.value))} value={props.priority}>\n            <option>1</option>\n            <option>2</option>\n            <option>3</option>\n        </select>\n        </span>\n    </li>\n    );\n\n}\n\n// {\nexport default Task;","import Task from './Task';\nimport swal from 'sweetalert';\n\nimport React, {useEffect, useState} from 'react';\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport firebase from \"firebase/compat\";\n\n\n// let myLength = generateUniqueID()\nfunction ToDoList(props) {\n    const [value, setValue] = useState(null);\n    const [priority, setPriority] = useState(1);\n    const [showCompleted, setShowCompleted] = useState(true);\n    // const [numCompleted, setNumCompleted] = useState(0);\n    const dict = {'task': 'Name', 'priority': 'Priority', 'created':'Date Created', 'Filter By:':'Filter By:'};\n\n    function enterB() {\n        if (value !== null && value !== \"\") {\n            let newItem = {\n                id: generateUniqueID(),\n                task: value,\n                completed: false,\n                priority: priority,\n                created: firebase.database.ServerValue.TIMESTAMP\n            };\n            props.onNewItemAdded(newItem);\n            setValue(\"\")\n        }\n    }\n    let numCompleted = 0\n    console.log(props.list)\n    function renderList(unSortedList) {\n        let checkedArray = unSortedList.filter(x => x.completed)\n        numCompleted = checkedArray.length\n        let uncheckedArray = unSortedList.filter(x => !x.completed)\n        return [...uncheckedArray, ...checkedArray]\n    }\n\n    function onDelete(){\n        swal({\n            title: \"Are you sure?\",\n            text: \"Once deleted, you will not be able to recover completed tasks!\",\n            icon: \"warning\",\n            buttons: [\"No\", \"Yes\"],\n            dangerMode: true,\n        })\n            .then((okToDelete) => {\n                if (okToDelete) {\n                    let listOfIds = updatedList.filter(a => a.completed === true).map(a => a.id);\n                    props.onDeleteItem(listOfIds);\n                    numCompleted = 0\n\n                } else {\n                    return;\n                }\n            });\n    }\n\n\n\n    let updatedList = renderList(props.list)\n\n\n    return (\n        <>\n            <span className='headerClass'>\n            <h1 id=\"top-title\">To-Do List</h1>\n                <span id='sort-items'>\n                {/*<span id=\"sort-title\">Filter By: </span>*/}\n                <select  id=\"sort-button\" defaultValue={dict[props.filterValue]} class={updatedList.length != 0  ? \"show-buttons\" : \"grey-buttons\"} onChange={(e) => {\n                    props.filterBy(e.target.value.toLowerCase())\n                }}>\n                    {/*<optgroup label=\"Filter By\">*/}\n                    <option selected disabled>Filter By:</option>\n                    <option>Priority</option>\n                    <option>Name</option>\n                    <option>Date Created</option>\n                    {/*</optgroup>*/}\n                </select>\n                </span>\n            </span>\n            <div id=\"container\">\n\n                <div id=\"enter-item\">\n                    <input type=\"text\" value={value} id=\"input-text\" onKeyDown={(e) => e.code === \"Enter\" ? enterB() : null} onChange={ (e) => setValue(e.target.value)} placeholder=\"Add a task...\"/>\n                    <span id=\"enter-span\">\n                    <span id=\"priority-container\">\n                    <select id=\"priority-button\" onChange={(e)=> setPriority(parseInt(e.target.value))} defaultValue='Priority:' class={ value !== \"\" && value !== null ? \"show-buttons\" : \"grey-buttons\"}>\n                            <option selected disabled>Priority:</option>\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                    </select>\n                    </span>\n                        <span id='enter-button-container'>\n                    <button className={value !== \"\" && value !== null ? \"show-buttons\" : \"grey-buttons\"} onClick={enterB} id=\"enter-button\">+</button>\n                        </span>\n                    </span>\n                </div>\n\n                <div class=\"ListItems\">\n                    <ul id=\"list\">\n                        {showCompleted ? updatedList.map(a => <Task\n                            onTaskCompleted={ (selectedId, field, value) =>\n                            props.onContentChange(selectedId, field, value) ?  numCompleted--  : null\n                            }\n                            key = {a.id}\n                            displayButtons ={(whetherCompleted)=> {whetherCompleted ? numCompleted++ : numCompleted--}}\n                            {...a}\n                        />) : updatedList.filter(a => a.completed === false).map(a => <Task\n                            onTaskCompleted={ (selectedId, field, value) =>\n                            props.onContentChange(selectedId, field, value) ?  numCompleted-- : null\n                            }\n                            key = {a.id}\n                            displayButtons ={(whetherCompleted)=> whetherCompleted ? numCompleted++ : numCompleted--}\n                            {...a}\n                        />)}\n                        {console.log(numCompleted)}\n\n                    </ul>\n                </div>\n                <button class={numCompleted > 0 ? \"show-buttons\" : \"grey-buttons\"} id=\"hide-completed-button\" onClick={() => setShowCompleted(!showCompleted)}>{showCompleted ? \"Hide Completed\" : \"Show Completed\"}</button>\n                <button class={numCompleted > 0 && showCompleted ? \"show-buttons\" : \"grey-buttons\"} id=\"delete-button\" onClick={onDelete}>Delete Completed</button>\n            </div>\n        </>\n);\n}\n\n\nexport default ToDoList;\n\n","import logo from './logo.svg';\nimport './App.css';\nimport ToDoList from \"./To-DoList\";\nimport React, {useState} from 'react';\n\nimport firebase from \"firebase/compat\";\nimport { orderBy, limit } from \"firebase/firestore\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAMsDbORWI7OtcnI4VjQnY6xEE6XGjZPf0\",\n  authDomain: \"to-do-list-78c30.firebaseapp.com\",\n  projectId: \"to-do-list-78c30\",\n  storageBucket: \"to-do-list-78c30.appspot.com\",\n  messagingSenderId: \"466185835646\",\n  appId: \"1:466185835646:web:dbe8a4413a6cad9f3f742f\",\n  measurementId: \"G-3Q5LDPJYK6\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\nconst ourCollection = \"Master-List\";\n\nfunction App(props) {\n    const [filter, setFilter] = useState('Filter By:');\n    let query = ''\n    if (filter === 'Filter By:') {\n        query = db.collection(ourCollection);\n    }\n    else {\n        query = db.collection(ourCollection).orderBy(filter);\n    }\n    const [value, loading, error] = useCollection(query);\n\n    if (loading) {\n       return <h1> Loading...</h1>\n    }\n\n\n    // let taskList = null;\n    // query.orderBy(filter).get().then((snapshot)=> {taskList = snapshot.docs.map((doc)=> doc.data())\n    //     console.log(\"inside\",taskList);\n    // })\n    // console.log(\"outside\",taskList)\n    let taskList = value != null? value.docs.map((doc) => doc.data()) : []\n    function setField(id, field, value) {\n        if (field === 'task' && (value == \"\" || value == null) ) {\n            onDelete([id]);\n            }\n\n        else {\n            const doc = db.collection(ourCollection).doc(id);\n            doc.update({[field]:value});\n            setFilter(filter)\n        }\n    }\n    function addItem(newItem) {\n        const docRef = db.collection(ourCollection).doc(newItem.id);\n        docRef.set(newItem);\n    }\n    function onDelete(listOfIds) {\n        listOfIds.map(id => db.collection(ourCollection).doc(id).delete());\n    }\n    function getFilteredList(currentFilter) {\n        if (currentFilter === \"name\") {\n            currentFilter = \"task\"\n        }\n        if (currentFilter === \"date created\") {\n            currentFilter = \"created\"\n        }\n        setFilter(currentFilter)\n        }\n\n  return (\n      <ToDoList list={taskList} onContentChange={setField} onNewItemAdded={addItem} onDeleteItem={onDelete} filterBy={getFilteredList} filterValue={filter}></ToDoList>\n  );\n}\n\nexport default App;\n\n\n//change collection name, new db\n//test\n\n// Users -> list -> items\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// const initialData = [\n//     {\n//         id: \"1\",\n//         task: \"Sleep\",\n//         completed: false\n//     },\n//     {\n//         id: \"2\",\n//         task: \"Start CS124 Lab3\",\n//         completed: false\n//     },\n//     {\n//         id: \"3\",\n//         task: \"Submit CS124 Lab2\",\n//         completed: true,\n//     },\n//     {\n//         id: \"4\",\n//         task: \"Enjoy Fall Break!\",\n//         completed: false\n//     }\n// ];\n\nReactDOM.render(\n  <React.StrictMode>\n       <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}