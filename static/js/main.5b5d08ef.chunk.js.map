{"version":3,"sources":["logo.svg","Task.js","To-DoList.js","App.js","reportWebVitals.js","index.js"],"names":["Task","props","useState","completed","setCompleted","editContent","setEditContent","task","taskValue","setTaskValue","className","type","onChange","onTaskCompleted","id","displayButtons","checked","class","suppressContentEditableWarning","contentEditable","onKeyDown","k","code","setTimeout","onInput","e","currentTarget","textContent","parseInt","target","value","defaultValue","priority","key","ToDoList","setValue","setPriority","showCompleted","setShowCompleted","dummyState","setDummyState","enterB","newItem","generateUniqueID","created","firebase","database","ServerValue","TIMESTAMP","onNewItemAdded","numCompleted","updatedList","unSortedList","checkedArray","filter","x","length","uncheckedArray","renderList","list","filterBy","toLowerCase","placeholder","onClick","map","a","selectedId","field","onContentChange","whetherCompleted","console","log","swal","title","text","icon","buttons","dangerMode","then","okToDelete","listOfIds","onDeleteItem","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","ourCollection","App","setFilter","query","collection","orderBy","useCollection","loading","taskList","docs","doc","data","onDelete","delete","update","set","currentFilter","filterValue","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAAe,I,6BCiCAA,MAhCf,SAAcC,GACV,MAAkCC,mBAASD,EAAME,WAAjD,mBAAOA,EAAP,KAAkBC,EAAlB,KACA,EAAsCF,oBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAkCJ,mBAASD,EAAMM,MAAjD,mBAAOC,EAAP,KAAkBC,EAAlB,KAOA,OACA,+BACI,sBAAMC,UAAU,WAAhB,SACA,kCACI,uBAAOC,KAAK,WAAWC,SAAU,WAAOR,GAAcD,GAAYF,EAAMY,gBAAgBZ,EAAMa,GAAI,aAAcX,GAAYF,EAAMc,gBAAgBZ,IAAaa,SAAW,EAAOC,MAAOd,EAAY,UAAY,cACxM,sBAAMe,gCAAgC,EAAMC,gBAAiBd,EAAae,UAAW,SAACC,GAAD,MAAiB,UAAXA,EAAEC,MATzGhB,GAAe,GACfL,EAAMY,gBAAgBZ,EAAMa,GAAI,OAAQN,QACxCe,YAAW,WAAOjB,GAAe,KAAO,KAOoG,MAAMW,MAAOd,EAAY,eAAiB,iBAAkBqB,QAAS,SAACC,GAAD,OAAOhB,EAAagB,EAAEC,cAAcC,cAAzO,SAAwP1B,EAAMM,YAI1Q,sBAAMG,UAAU,wBAAhB,SACA,yBAAQA,UAAU,eAAeE,SAAU,SAACa,GAAD,OAAOxB,EAAMY,gBAAgBZ,EAAMa,GAAI,WAAYc,SAASH,EAAEI,OAAOC,SAASC,aAAc9B,EAAM+B,SAA7I,UACI,uCACA,uCACA,8CAZE/B,EAAMgC,M,iCC2GLC,MA9Gf,SAAkBjC,GACd,MAA0BC,mBAAS,MAAnC,mBAAO4B,EAAP,KAAcK,EAAd,KACA,EAAgCjC,mBAAS,GAAzC,mBAAO8B,EAAP,KAAiBI,EAAjB,KACA,EAA0ClC,oBAAS,GAAnD,mBAAOmC,EAAP,KAAsBC,EAAtB,KACA,EAAoCpC,oBAAS,GAA7C,mBAAOqC,EAAP,KAAmBC,EAAnB,KAGA,SAASC,IACL,GAAc,OAAVX,GAA4B,KAAVA,EAAc,CAChC,IAAIY,EAAU,CACV5B,GAAI6B,cACJpC,KAAMuB,EACN3B,WAAW,EACX6B,SAAUA,EACVY,QAASC,IAASC,SAASC,YAAYC,WAE3C/C,EAAMgD,eAAeP,GACrBP,EAAS,KAGjB,IAAIe,EAAe,EA8BfC,EA7BJ,SAAoBC,GAChB,IAAIC,EAAeD,EAAaE,QAAO,SAAAC,GAAC,OAAIA,EAAEpD,aAC9C+C,EAAeG,EAAaG,OAC5B,IAAIC,EAAiBL,EAAaE,QAAO,SAAAC,GAAC,OAAKA,EAAEpD,aACjD,MAAM,GAAN,mBAAWsD,GAAX,YAA8BJ,IAyBhBK,CAAWzD,EAAM0D,MAEnC,OACI,qCACI,iCACA,oBAAI7C,GAAG,YAAP,wBACI,yBAAQA,GAAG,cAAeF,SAAU,SAACa,GACjCxB,EAAM2D,SAASnC,EAAEI,OAAOC,MAAM+B,eAC9BrB,GAAeD,IAFnB,UAII,8CACA,0CACA,yDAGR,sBAAKzB,GAAG,YAAR,UAEI,sBAAKA,GAAG,aAAR,UACI,uBAAOH,KAAK,OAAOmB,MAAOA,EAAOhB,GAAG,aAAaM,UAAW,SAACK,GAAD,MAAkB,UAAXA,EAAEH,KAAmBmB,IAAW,MAAM7B,SAAW,SAACa,GAAD,OAAOU,EAASV,EAAEI,OAAOC,QAAQgC,YAAY,kBACjK,uBAAMhD,GAAG,aAAT,UACA,sBAAMA,GAAG,qBAAT,SACA,yBAAQA,GAAG,kBAAkBF,SAAU,SAACa,GAAD,OAAMW,EAAYR,SAASH,EAAEI,OAAOC,SAASC,aAAcC,EAAUf,MAAkB,KAAVa,GAA0B,OAAVA,EAAiB,eAAiB,eAAtK,UACQ,uCACA,uCACA,4CAGR,wBAAQb,MAAkB,KAAVa,GAA0B,OAAVA,EAAiB,eAAiB,eAAeiC,QAAStB,EAAQ3B,GAAG,eAArG,qBAIJ,qBAAKG,MAAM,YAAX,SACI,qBAAIH,GAAG,OAAP,UACKuB,EAAgBc,EAAYa,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,aAClCpD,gBAAkB,SAACqD,EAAYC,EAAOrC,GAApB,OAClB7B,EAAMmE,gBAAgBF,EAAYC,EAAOrC,GAAUoB,IAAkB,MAGrEnC,eAAiB,SAACsD,GAAqBA,EAAmBnB,IAAiBA,MACvEe,GAFGA,EAAEnD,OAGPqC,EAAYG,QAAO,SAAAW,GAAC,OAAoB,IAAhBA,EAAE9D,aAAqB6D,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,aAC1DpD,gBAAkB,SAACqD,EAAYC,EAAOrC,GAApB,OAClB7B,EAAMmE,gBAAgBF,EAAYC,EAAOrC,GAAUoB,IAAiB,MAGpEnC,eAAiB,SAACsD,GAAD,OAAqBA,EAAmBnB,IAAiBA,MACtEe,GAFGA,EAAEnD,OAIZwD,QAAQC,IAAIrB,QAIrB,wBAAQjC,MAAOiC,EAAe,EAAI,eAAiB,eAAgBpC,GAAG,wBAAwBiD,QAAS,kBAAMzB,GAAkBD,IAA/H,SAAgJA,EAAgB,iBAAmB,mBACnL,wBAAQpB,MAAOiC,EAAe,GAAKb,EAAgB,eAAiB,eAAgBvB,GAAG,gBAAgBiD,QA3EnH,WACIS,IAAK,CACDC,MAAO,gBACPC,KAAM,iEACNC,KAAM,UACNC,QAAS,CAAC,KAAM,OAChBC,YAAY,IAEXC,MAAK,SAACC,GACH,GAAIA,EAAJ,CACI,IAAIC,EAAY7B,EAAYG,QAAO,SAAAW,GAAC,OAAoB,IAAhBA,EAAE9D,aAAoB6D,KAAI,SAAAC,GAAC,OAAIA,EAAEnD,MACzEb,EAAMgF,aAAaD,GACnB9B,EAAe,OA+DnB,qC,gBC7FhBL,IAASqC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjB,IAAMC,EAAK7C,IAAS8C,YACdC,EAAgB,cAgDPC,MA9Cf,SAAa5F,GACT,MAA4BC,mBAAS,QAArC,mBAAOoD,EAAP,KAAewC,EAAf,KACMC,EAAQL,EAAGM,WAAWJ,GAAeK,QAAQ3C,GACnD,EAAgC4C,YAAcH,GAA9C,mBAAOjE,EAAP,KAAcqE,EAAd,KAEA,GAFA,KAEIA,EACD,OAAO,6CAQV,IAAIC,EAAoB,MAATtE,EAAeA,EAAMuE,KAAKrC,KAAI,SAACsC,GAAD,OAASA,EAAIC,UAAU,GAcpE,SAASC,EAASxB,GACdA,EAAUhB,KAAI,SAAAlD,GAAE,OAAI4E,EAAGM,WAAWJ,GAAeU,IAAIxF,GAAI2F,YAY/D,OACI,cAAC,EAAD,CAAU9C,KAAMyC,EAAUhC,gBA3B5B,SAAkBtD,EAAIqD,EAAOrC,GACX,SAAVqC,GAA8B,IAATrC,GAAwB,MAATA,EAKpC4D,EAAGM,WAAWJ,GAAeU,IAAIxF,GAAI4F,OAArC,eAA8CvC,EAAOrC,IAJrD0E,EAAS,CAAC1F,KAyBqCmC,eAlBvD,SAAiBP,GACEgD,EAAGM,WAAWJ,GAAeU,IAAI5D,EAAQ5B,IACjD6F,IAAIjE,IAgBiEuC,aAAcuB,EAAU5C,SAXxG,SAAyBgD,GACC,SAAlBA,IACAA,EAAgB,QAEE,kBAAlBA,IACAA,EAAgB,WAEpBd,EAAUc,IAIqHC,YAAavD,KCrDrIwD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCqBdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACK,cAAC,EAAD,CAAKjB,KAzBQ,CAChB,CACIzF,GAAI,IACJP,KAAM,QACNJ,WAAW,GAEf,CACIW,GAAI,IACJP,KAAM,mBACNJ,WAAW,GAEf,CACIW,GAAI,IACJP,KAAM,oBACNJ,WAAW,GAEf,CACIW,GAAI,IACJP,KAAM,oBACNJ,WAAW,QAQjBsH,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5b5d08ef.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState} from 'react';\nfunction Task(props) {\n    const [completed, setCompleted] = useState(props.completed);\n    const [editContent, setEditContent] = useState(true);\n    const [taskValue, setTaskValue] = useState(props.task)\n\n    function editTimeout() {\n        setEditContent(false);\n        props.onTaskCompleted(props.id, 'task', taskValue);\n        setTimeout(() => {setEditContent(true)},50)\n    }\n    return (\n    <li key ={props.key}>\n        <span className=\"taskItem\">\n        <label>\n            <input type=\"checkbox\" onChange={() => {setCompleted(!completed); props.onTaskCompleted(props.id, 'completed', !completed); props.displayButtons(!completed)}} checked = {false} class={completed ? \"checked\" : \"unchecked\"}/>\n                    <span suppressContentEditableWarning={true} contentEditable={editContent} onKeyDown={(k)=> k.code === 'Enter' ? editTimeout() : null} class={completed ? \"checked-text\" : \"unchecked-text\"} onInput={(e) => setTaskValue(e.currentTarget.textContent)}>{props.task}</span>\n                             {/*onChange={(e) => setPriority(e.target.value)} defaultValue={priority}*/}\n        </label>\n        </span>\n        <span className=\"taskPriorityContainer\">\n        <select className=\"taskPriority\" onChange={(e) => props.onTaskCompleted(props.id, 'priority', parseInt(e.target.value))} defaultValue={props.priority}>\n            <option>1</option>\n            <option>2</option>\n            <option>3</option>\n        </select>\n        </span>\n    </li>\n    );\n\n}\n\n// {\nexport default Task;","import Task from './Task';\nimport swal from 'sweetalert';\n\nimport React, {useEffect, useState} from 'react';\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport firebase from \"firebase/compat\";\n\n\n// let myLength = generateUniqueID()\nfunction ToDoList(props) {\n    const [value, setValue] = useState(null);\n    const [priority, setPriority] = useState(1);\n    const [showCompleted, setShowCompleted] = useState(true);\n    const [dummyState, setDummyState] = useState(true);\n    // const [numCompleted, setNumCompleted] = useState(0);\n\n    function enterB() {\n        if (value !== null && value !== \"\") {\n            let newItem = {\n                id: generateUniqueID(),\n                task: value,\n                completed: false,\n                priority: priority,\n                created: firebase.database.ServerValue.TIMESTAMP\n            };\n            props.onNewItemAdded(newItem);\n            setValue(\"\")\n        }\n    }\n    let numCompleted = 0\n    function renderList(unSortedList) {\n        let checkedArray = unSortedList.filter(x => x.completed)\n        numCompleted = checkedArray.length\n        let uncheckedArray = unSortedList.filter(x => !x.completed)\n        return [...uncheckedArray, ...checkedArray]\n    }\n\n    function onDelete(){\n        swal({\n            title: \"Are you sure?\",\n            text: \"Once deleted, you will not be able to recover completed tasks!\",\n            icon: \"warning\",\n            buttons: [\"No\", \"Yes\"],\n            dangerMode: true,\n        })\n            .then((okToDelete) => {\n                if (okToDelete) {\n                    let listOfIds = updatedList.filter(a => a.completed === true).map(a => a.id);\n                    props.onDeleteItem(listOfIds);\n                    numCompleted = 0\n\n                } else {\n                    return;\n                }\n            });\n    }\n\n\n\n    let updatedList = renderList(props.list)\n\n    return (\n        <>\n            <span>\n            <h1 id=\"top-title\">To-Do List</h1>\n                <select id='sort-button'  onChange={(e) => {\n                    props.filterBy(e.target.value.toLowerCase())\n                    setDummyState(!dummyState)\n                }}>\n                    <option>Priority</option>\n                    <option>Name</option>\n                    <option>Creation Date</option>\n                </select>\n            </span>\n            <div id=\"container\">\n\n                <div id=\"enter-item\">\n                    <input type=\"text\" value={value} id=\"input-text\" onKeyDown={(e) => e.code === \"Enter\" ? enterB() : null} onChange={ (e) => setValue(e.target.value)} placeholder=\"Add a task...\"/>\n                    <span id=\"enter-span\">\n                    <span id=\"priority-container\">\n                    <select id=\"priority-button\" onChange={(e)=> setPriority(parseInt(e.target.value))} defaultValue={priority} class={ value !== \"\" && value !== null ? \"show-buttons\" : \"grey-buttons\"}>\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                    </select>\n                    </span>\n                    <button class={ value !== \"\" && value !== null ? \"show-buttons\" : \"grey-buttons\"}onClick={enterB} id=\"enter-button\">+</button>\n                    </span>\n                </div>\n\n                <div class=\"ListItems\">\n                    <ul id=\"list\">\n                        {showCompleted ? updatedList.map(a => <Task\n                            onTaskCompleted={ (selectedId, field, value) =>\n                            props.onContentChange(selectedId, field, value) ?  numCompleted--  : null\n                            }\n                            key = {a.id}\n                            displayButtons ={(whetherCompleted)=> {whetherCompleted ? numCompleted++ : numCompleted--}}\n                            {...a}\n                        />) : updatedList.filter(a => a.completed === false).map(a => <Task\n                            onTaskCompleted={ (selectedId, field, value) =>\n                            props.onContentChange(selectedId, field, value) ?  numCompleted-- : null\n                            }\n                            key = {a.id}\n                            displayButtons ={(whetherCompleted)=> whetherCompleted ? numCompleted++ : numCompleted--}\n                            {...a}\n                        />)}\n                        {console.log(numCompleted)}\n\n                    </ul>\n                </div>\n                <button class={numCompleted > 0 ? \"show-buttons\" : \"grey-buttons\"} id=\"hide-completed-button\" onClick={() => setShowCompleted(!showCompleted)}>{showCompleted ? \"Hide Completed\" : \"Show Completed\"}</button>\n                <button class={numCompleted > 0 && showCompleted ? \"show-buttons\" : \"grey-buttons\"} id=\"delete-button\" onClick={onDelete}>Delete Completed</button>\n            </div>\n        </>\n);\n}\n\n\nexport default ToDoList;\n\n","import logo from './logo.svg';\nimport './App.css';\nimport ToDoList from \"./To-DoList\";\nimport React, {useState} from 'react';\n\nimport firebase from \"firebase/compat\";\nimport { query, orderBy, limit } from \"firebase/firestore\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAMsDbORWI7OtcnI4VjQnY6xEE6XGjZPf0\",\n  authDomain: \"to-do-list-78c30.firebaseapp.com\",\n  projectId: \"to-do-list-78c30\",\n  storageBucket: \"to-do-list-78c30.appspot.com\",\n  messagingSenderId: \"466185835646\",\n  appId: \"1:466185835646:web:dbe8a4413a6cad9f3f742f\",\n  measurementId: \"G-3Q5LDPJYK6\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\nconst ourCollection = \"Master-List\";\n\nfunction App(props) {\n    const [filter, setFilter] = useState('task');\n    const query = db.collection(ourCollection).orderBy(filter);\n    const [value, loading, error] = useCollection(query);\n\n    if (loading) {\n       return <h1> Loading...</h1>\n    }\n\n    // let taskList = null;\n    // query.orderBy(filter).get().then((snapshot)=> {taskList = snapshot.docs.map((doc)=> doc.data())\n    //     console.log(\"inside\",taskList);\n    // })\n    // console.log(\"outside\",taskList)\n    let taskList = value != null? value.docs.map((doc) => doc.data()) : []\n    function setField(id, field, value) {\n        if (field === 'task' && (value == \"\" || value == null) ) {\n            onDelete([id]);\n            }\n\n        else {\n            db.collection(ourCollection).doc(id).update({[field]:value});\n        }\n    }\n    function addItem(newItem) {\n        const docRef = db.collection(ourCollection).doc(newItem.id);\n        docRef.set(newItem);\n    }\n    function onDelete(listOfIds) {\n        listOfIds.map(id => db.collection(ourCollection).doc(id).delete());\n    }\n    function getFilteredList(currentFilter) {\n        if (currentFilter === \"name\") {\n            currentFilter = \"task\"\n        }\n        if (currentFilter === \"creation date\") {\n            currentFilter = \"created\"\n        }\n        setFilter(currentFilter)\n        }\n\n  return (\n      <ToDoList list={taskList} onContentChange={setField} onNewItemAdded={addItem} onDeleteItem={onDelete} filterBy={getFilteredList} filterValue={filter}></ToDoList>\n  );\n}\n\nexport default App;\n\n\n//change collection name, new db\n//test\n\n// Users -> list -> items\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nconst initialData = [\n    {\n        id: \"1\",\n        task: \"Sleep\",\n        completed: false\n    },\n    {\n        id: \"2\",\n        task: \"Start CS124 Lab3\",\n        completed: false\n    },\n    {\n        id: \"3\",\n        task: \"Submit CS124 Lab2\",\n        completed: true,\n    },\n    {\n        id: \"4\",\n        task: \"Enjoy Fall Break!\",\n        completed: false\n    }\n];\n\nReactDOM.render(\n  <React.StrictMode>\n       <App data={initialData}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}