Index: design.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n# CS124: Interaction Design Lab 1\n\n(Saatvik Sejpal, Anirudh Satish\n)\n\n## Design Decisions\n\n### Early Design Process and Alternative Designs\nOur design process began with some discussions on what a to-do list is meant to do, and a few simple\nsketches of prospective desings that are included below.\n\n![](Page2.png)\nWe thought about the \"plus\" button being floating, moving down as we added items.\nAlthough this probably looks cool, this is not ideal as the user needs to search for the \"plus\"\nbutton each time, and therefore we decided against the same.\nWe also thought about having a separate section for completed items at the bottom of the screen; however, we decided\nto just do away with having a separate section and just float the completed tasks to the bottom of the page when we mark them\ncompleted.\n\n![](Page3.png)\n\nThe intent of the \"plus\" button in our initial designs was to bring up a text box\nfor input. But after some deliberation, we came to the conclusion that this was unnecessarily\ncomplicated and tedious. Thus we reverted to a fixed text input box at the top of our list, \nwith a plus button to add the item to the list.\n\n\n## Final Design:\n\nWhen an item is added to our list, and the enter/plus button is hit, it gets added to the list much like it would to a stack, \nthat is it gets added to the top, and the other elements would move down to make space for the newly \nadded item. \nWhen an item is clicked, it gets marked as checked, both via the checkbox and the text itself being striked-through. It also floats to the bottom of the page with the other\ncompleted items.\nWe decided to go with this design as it makes it abundantly clear to the user when an item is marked as checked/completed or not. \n\nAdditionally, if we ever were to have too many elements in the list, a scroll wheel would be visible on the right to allow the user to scroll through\nall the items in the list, and this also avoids against any instances of the items of the list overlapping with the delete and hide buttons\nat the bottom of the application. \n\nThe \"Hide Completed\" Button's purpose is to hide all completed/checked tasks, and the \"Delete Completed\" button is meant \nto delete all completed tasks from the list.\n\n![](Page4.png)\n\n\n## User Testing:\n\nWe showed our project to one of our roommates, who we will refer to as Person A in this section. As we do not have a working \npage/application due to the lack of javascript, we just spoke about the design, their first thoughts on how useable it was, etc. \n\nPerson A believed that our application was quite clear on how to add elements to the to-do list, which was via the text input at the top\nfollowed by an enter keystroke, or hitting the plus button. Additionally, they liked our idea of how checked items/completed items \nwould float down the list and pile up at the bottom of the list, creating a clear demarcation between uncompleted and completed tasks. \n\nThey did mention something that we feel could be useful if we are ever to actually implement javascript for this application. To edit \nitems that are already in the list, they felt that a long press on mobile was the most intuitive and logical way to edit tasks. \nTherefore, we would like to add this functionality in our future implementation. \n\n\n\n## Screenshots and Images from our implementation:\n\nAttached below is a screenshot of our application at a random stage, with some items in the list and some marked as checked\n\n![](Screenshots/MainHTMLPic.png)\n\nWe also have images from different stages of our application to show the flow when completing the different tasks that it is intended to do. \n\n### Task 1: Adding a task to an empty list\n\nScreen at the Beginning of the task:\n\n![](Screenshots/PreTask1.png)\n\nScreen during the process of adding an item to the list:\n\n![](Screenshots/IntermediateTask1.png)\n\nScreen after adding said item to the list:\n\n![](Screenshots/PostTask1.png)\n\n### Task 2: Adding an element to a non-empty List\n\nScreen at the Beginning of the task:\n\n![](Screenshots/PreTask2.png)\n\nScreen during the process of adding the item to the list:\n\n![](Screenshots/IntermediateTask2.png)\n\nScreen after adding said item to the list:\n\n![](Screenshots/PostTask2.png)\n\nHere we can see how our app deals with new items when there are already existing things to do. \nIt simply adds it to the top, and moves the rest down, like a stack. \n\n\n### Task 3: Mark an Item completed\n\nScreen at the Beginning of the task:\n\n![](Screenshots/PreTask3.png)\n\nScreen after marking item as completed:\n\n![](Screenshots/PostTask3.png)\n\nOur app moves the completed items to the bottom of the list, as talked about earlier, therefore grouping all\ncompleted and uncompleted items together. \n\n### Task 4: Rename an item in the list:\n\nScreen at the Beginning of the task:\n\n![](Screenshots/PreTask4.png)\n\nScreen during the process of renaming the item:\n\n![](Screenshots/IntermediateTask4.png)\n\nScreen after renaming the item:\n\n![](Screenshots/PostTask4.png)\n\nTo rename the item, our text is editable, and thus when a user clicks on the text, they are able \nto rename that to whatever they please. whether this be completely removing text, or adding some more. \n\n\n### Task 5: To show only uncompleted items\n\nTo accommodate this task, we have a button called \"Hide Completed\", which is pretty self explanatory. \nOn clicking this button, the application will hide all completed tasks from the user, and the button's text changes\nto show all. Clicking this button show all will revert to the stage where all tasks, both completed and uncompleted are visible\n\nScreen at the Beginning of the task:\n\n![](Screenshots/PreTask5.png)\n\nScreen after clicking hide completed button:\n\n![](Screenshots/PostTask5.png)\n\n### Task 6: Delete all completed tasks:\n\nFor this function, our app has a \"delete completed\" button, which when clicked will \ndelete all items that are marked as checked/completed in the list, leaving only the uncompleted \ntasks on the screen. Unlike hide completed tasks, this is not reversible, and actually removes them, rather\nthan just not showing the completed tasks. \n\nScreen at the Beginning of the task:\n\n![](Screenshots/PreTask6.png)\n\nScreen after deleting all completed tasks:\n\n![](Screenshots/PostTask6.png)\n\n\n\n\n\n## Challenges Faced\n\nOur initial mistake was in understanding the purpose of this lab. We thought that we had to make a fully functioning JavaScript based\nWeb App that would allow all the To-Do List functionalities. Hence, we spent a few hours, initially working in Raw JS trying to make this a\nproper To-Do List. After we realized that the task was to simply make static webpages, our process went a lot more smoothly and we did not face any really \nproblematic challenges. \n\nI think the primary thing that we struggled with was just not being able to align elements correctly with GridBoxes.\nAlso, it took us a while to select a font that we were happy with because some of the initial fonts we chose had weird ways of\ndisplaying hyphens. Hence, we finally arrived at the QuickSand font which is a Google Font (and we think it looks pretty good!).\n\n\n\n## Part of the Design you are most proud of: \n\nWe are quite proud of the color scheme that we ended up using. We both think that we are not super artistic and hence are quite proud of how pleasing\nour To-Do List looks. The general minimal design that we have come up with also looks quite nice in our opinion with the rounded corners of all the elements on the page.\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/design.md b/design.md
--- a/design.md	(revision 6dab3b9aa991cc83d1215ba400f738699b1b61c8)
+++ b/design.md	(date 1632450032331)
@@ -66,6 +66,7 @@
 
 ![](Screenshots/MainHTMLPic.png)
 
+
 We also have images from different stages of our application to show the flow when completing the different tasks that it is intended to do. 
 
 ### Task 1: Adding a task to an empty list
Index: markdown.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/markdown.css b/markdown.css
new file mode 100644
--- /dev/null	(date 1632449534047)
+++ b/markdown.css	(date 1632449534047)
@@ -0,0 +1,4 @@
+img[alt="Screenshots/PreTask1.png"] {
+    max-width:  20px;
+    display: block;
+}
\ No newline at end of file
